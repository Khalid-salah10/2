#include <iostream>
#include <vector>
#include <chrono>

int egenBinarySearch(const std::vector<int>& vec, int target) {
    int low = 0;
    int high = vec.size() - 1;

    while (low <= high) {
        int mid = low + (high - low) / 2;  // Undvika overflow
        if (vec[mid] == target) {
            return mid;
        }
        else if (vec[mid] < target) {
            low = mid + 1;
        } else {
            high = mid - 1;
        }
    }
    return -1;  // Om inte hittat
}

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    
    int target = 7;
    
    auto start = std::chrono::high_resolution_clock::now();
    int index = egenBinarySearch(data, target);
    auto end = std::chrono::high_resolution_clock::now();
    
    if (index != -1) {
        std::cout << "Hittade värdet " << target << " på index " << index << std::endl;
    } else {
        std::cout << "Värdet " << target << " hittades inte" << std::endl;
    }

    auto duration = std::chrono::duration_cast<std::chrono::nanoseconds>(end - start).count();
    std::cout << "Tid för binary search (nanosekunder): " << duration << " ns" << std::endl;
}
